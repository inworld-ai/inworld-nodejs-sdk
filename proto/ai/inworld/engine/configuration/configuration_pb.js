// source: ai/inworld/engine/configuration/configuration.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.configuration.CapabilitiesConfiguration', null, global);
goog.exportSymbol('proto.configuration.ClientConfiguration', null, global);
goog.exportSymbol('proto.configuration.SessionConfiguration', null, global);
goog.exportSymbol('proto.configuration.UserConfiguration', null, global);
goog.exportSymbol('proto.configuration.UserConfiguration.UserSettings', null, global);
goog.exportSymbol('proto.configuration.UserConfiguration.UserSettings.PlayerProfile', null, global);
goog.exportSymbol('proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.CapabilitiesConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.CapabilitiesConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.CapabilitiesConfiguration.displayName = 'proto.configuration.CapabilitiesConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.UserConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.UserConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.UserConfiguration.displayName = 'proto.configuration.UserConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.UserConfiguration.UserSettings = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.UserConfiguration.UserSettings, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.UserConfiguration.UserSettings.displayName = 'proto.configuration.UserConfiguration.UserSettings';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.configuration.UserConfiguration.UserSettings.PlayerProfile.repeatedFields_, null);
};
goog.inherits(proto.configuration.UserConfiguration.UserSettings.PlayerProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.UserConfiguration.UserSettings.PlayerProfile.displayName = 'proto.configuration.UserConfiguration.UserSettings.PlayerProfile';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.displayName = 'proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.ClientConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.ClientConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.ClientConfiguration.displayName = 'proto.configuration.ClientConfiguration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.configuration.SessionConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.configuration.SessionConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.configuration.SessionConfiguration.displayName = 'proto.configuration.SessionConfiguration';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.CapabilitiesConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.CapabilitiesConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.CapabilitiesConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.CapabilitiesConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    audio: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    interruptions: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    emotions: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    turnBasedStt: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    emotionStreaming: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    silenceEvents: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    phonemeInfo: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    continuation: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    sessionCancellation: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    narratedActions: jspb.Message.getBooleanFieldWithDefault(msg, 11, false),
    regenerateResponse: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    relations: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    debugInfo: jspb.Message.getBooleanFieldWithDefault(msg, 14, false),
    ttsMp3: jspb.Message.getBooleanFieldWithDefault(msg, 15, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.CapabilitiesConfiguration}
 */
proto.configuration.CapabilitiesConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.CapabilitiesConfiguration;
  return proto.configuration.CapabilitiesConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.CapabilitiesConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.CapabilitiesConfiguration}
 */
proto.configuration.CapabilitiesConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInterruptions(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmotions(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTurnBasedStt(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEmotionStreaming(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSilenceEvents(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPhonemeInfo(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setContinuation(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSessionCancellation(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNarratedActions(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRegenerateResponse(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRelations(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDebugInfo(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTtsMp3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.CapabilitiesConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.CapabilitiesConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.CapabilitiesConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.CapabilitiesConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudio();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getInterruptions();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getEmotions();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getTurnBasedStt();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEmotionStreaming();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getSilenceEvents();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getPhonemeInfo();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getContinuation();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getSessionCancellation();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getNarratedActions();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = message.getRegenerateResponse();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getRelations();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getDebugInfo();
  if (f) {
    writer.writeBool(
      14,
      f
    );
  }
  f = message.getTtsMp3();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
};


/**
 * optional bool audio = 1;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getAudio = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setAudio = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool interruptions = 3;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getInterruptions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setInterruptions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional bool emotions = 4;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getEmotions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setEmotions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * optional bool turn_based_stt = 5;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getTurnBasedStt = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setTurnBasedStt = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional bool emotion_streaming = 6;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getEmotionStreaming = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setEmotionStreaming = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * optional bool silence_events = 7;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getSilenceEvents = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setSilenceEvents = function(value) {
  return jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool phoneme_info = 8;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getPhonemeInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setPhonemeInfo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional bool continuation = 9;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getContinuation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setContinuation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool session_cancellation = 10;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getSessionCancellation = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setSessionCancellation = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool narrated_actions = 11;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getNarratedActions = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setNarratedActions = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


/**
 * optional bool regenerate_response = 12;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getRegenerateResponse = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setRegenerateResponse = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool relations = 13;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getRelations = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setRelations = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional bool debug_info = 14;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getDebugInfo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 14, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setDebugInfo = function(value) {
  return jspb.Message.setProto3BooleanField(this, 14, value);
};


/**
 * optional bool tts_mp3 = 15;
 * @return {boolean}
 */
proto.configuration.CapabilitiesConfiguration.prototype.getTtsMp3 = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.CapabilitiesConfiguration} returns this
 */
proto.configuration.CapabilitiesConfiguration.prototype.setTtsMp3 = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.UserConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.UserConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.UserConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    id: jspb.Message.getFieldWithDefault(msg, 2, ""),
    userSettings: (f = msg.getUserSettings()) && proto.configuration.UserConfiguration.UserSettings.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.UserConfiguration}
 */
proto.configuration.UserConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.UserConfiguration;
  return proto.configuration.UserConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.UserConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.UserConfiguration}
 */
proto.configuration.UserConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 3:
      var value = new proto.configuration.UserConfiguration.UserSettings;
      reader.readMessage(value,proto.configuration.UserConfiguration.UserSettings.deserializeBinaryFromReader);
      msg.setUserSettings(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.UserConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.UserConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.UserConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserSettings();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.configuration.UserConfiguration.UserSettings.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.UserConfiguration.UserSettings.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.UserConfiguration.UserSettings.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.UserConfiguration.UserSettings} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.toObject = function(includeInstance, msg) {
  var f, obj = {
    viewTranscriptConsent: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    playerProfile: (f = msg.getPlayerProfile()) && proto.configuration.UserConfiguration.UserSettings.PlayerProfile.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.UserConfiguration.UserSettings}
 */
proto.configuration.UserConfiguration.UserSettings.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.UserConfiguration.UserSettings;
  return proto.configuration.UserConfiguration.UserSettings.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.UserConfiguration.UserSettings} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.UserConfiguration.UserSettings}
 */
proto.configuration.UserConfiguration.UserSettings.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setViewTranscriptConsent(value);
      break;
    case 2:
      var value = new proto.configuration.UserConfiguration.UserSettings.PlayerProfile;
      reader.readMessage(value,proto.configuration.UserConfiguration.UserSettings.PlayerProfile.deserializeBinaryFromReader);
      msg.setPlayerProfile(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.UserConfiguration.UserSettings.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.UserConfiguration.UserSettings.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.UserConfiguration.UserSettings} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getViewTranscriptConsent();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPlayerProfile();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.configuration.UserConfiguration.UserSettings.PlayerProfile.serializeBinaryToWriter
    );
  }
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.UserConfiguration.UserSettings.PlayerProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldsList: jspb.Message.toObjectList(msg.getFieldsList(),
    proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.UserConfiguration.UserSettings.PlayerProfile;
  return proto.configuration.UserConfiguration.UserSettings.PlayerProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField;
      reader.readMessage(value,proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.deserializeBinaryFromReader);
      msg.addFields(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.UserConfiguration.UserSettings.PlayerProfile.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fieldValue: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField;
  return proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFieldValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFieldId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFieldValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string field_id = 1;
 * @return {string}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.getFieldId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField} returns this
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.setFieldId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string field_value = 2;
 * @return {string}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.getFieldValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField} returns this
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField.prototype.setFieldValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated PlayerField fields = 3;
 * @return {!Array<!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField>}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.getFieldsList = function() {
  return /** @type{!Array<!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField, 3));
};


/**
 * @param {!Array<!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField>} value
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile} returns this
*/
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.setFieldsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField=} opt_value
 * @param {number=} opt_index
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField}
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.addFields = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.configuration.UserConfiguration.UserSettings.PlayerProfile.PlayerField, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.configuration.UserConfiguration.UserSettings.PlayerProfile} returns this
 */
proto.configuration.UserConfiguration.UserSettings.PlayerProfile.prototype.clearFieldsList = function() {
  return this.setFieldsList([]);
};


/**
 * optional bool view_transcript_consent = 1;
 * @return {boolean}
 */
proto.configuration.UserConfiguration.UserSettings.prototype.getViewTranscriptConsent = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.configuration.UserConfiguration.UserSettings} returns this
 */
proto.configuration.UserConfiguration.UserSettings.prototype.setViewTranscriptConsent = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional PlayerProfile player_profile = 2;
 * @return {?proto.configuration.UserConfiguration.UserSettings.PlayerProfile}
 */
proto.configuration.UserConfiguration.UserSettings.prototype.getPlayerProfile = function() {
  return /** @type{?proto.configuration.UserConfiguration.UserSettings.PlayerProfile} */ (
    jspb.Message.getWrapperField(this, proto.configuration.UserConfiguration.UserSettings.PlayerProfile, 2));
};


/**
 * @param {?proto.configuration.UserConfiguration.UserSettings.PlayerProfile|undefined} value
 * @return {!proto.configuration.UserConfiguration.UserSettings} returns this
*/
proto.configuration.UserConfiguration.UserSettings.prototype.setPlayerProfile = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.configuration.UserConfiguration.UserSettings} returns this
 */
proto.configuration.UserConfiguration.UserSettings.prototype.clearPlayerProfile = function() {
  return this.setPlayerProfile(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.configuration.UserConfiguration.UserSettings.prototype.hasPlayerProfile = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.configuration.UserConfiguration.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.UserConfiguration} returns this
 */
proto.configuration.UserConfiguration.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string id = 2;
 * @return {string}
 */
proto.configuration.UserConfiguration.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.UserConfiguration} returns this
 */
proto.configuration.UserConfiguration.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional UserSettings user_settings = 3;
 * @return {?proto.configuration.UserConfiguration.UserSettings}
 */
proto.configuration.UserConfiguration.prototype.getUserSettings = function() {
  return /** @type{?proto.configuration.UserConfiguration.UserSettings} */ (
    jspb.Message.getWrapperField(this, proto.configuration.UserConfiguration.UserSettings, 3));
};


/**
 * @param {?proto.configuration.UserConfiguration.UserSettings|undefined} value
 * @return {!proto.configuration.UserConfiguration} returns this
*/
proto.configuration.UserConfiguration.prototype.setUserSettings = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.configuration.UserConfiguration} returns this
 */
proto.configuration.UserConfiguration.prototype.clearUserSettings = function() {
  return this.setUserSettings(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.configuration.UserConfiguration.prototype.hasUserSettings = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.ClientConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.ClientConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.ClientConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.ClientConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    version: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.ClientConfiguration}
 */
proto.configuration.ClientConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.ClientConfiguration;
  return proto.configuration.ClientConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.ClientConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.ClientConfiguration}
 */
proto.configuration.ClientConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.ClientConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.ClientConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.ClientConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.ClientConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.configuration.ClientConfiguration.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.ClientConfiguration} returns this
 */
proto.configuration.ClientConfiguration.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.configuration.ClientConfiguration.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.ClientConfiguration} returns this
 */
proto.configuration.ClientConfiguration.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.configuration.ClientConfiguration.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.ClientConfiguration} returns this
 */
proto.configuration.ClientConfiguration.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.configuration.SessionConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.configuration.SessionConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.configuration.SessionConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.SessionConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameSessionId: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.configuration.SessionConfiguration}
 */
proto.configuration.SessionConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.configuration.SessionConfiguration;
  return proto.configuration.SessionConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.configuration.SessionConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.configuration.SessionConfiguration}
 */
proto.configuration.SessionConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGameSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.configuration.SessionConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.configuration.SessionConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.configuration.SessionConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.configuration.SessionConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string game_session_id = 2;
 * @return {string}
 */
proto.configuration.SessionConfiguration.prototype.getGameSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.configuration.SessionConfiguration} returns this
 */
proto.configuration.SessionConfiguration.prototype.setGameSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.configuration);
