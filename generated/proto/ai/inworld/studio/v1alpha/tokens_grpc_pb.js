// GENERATED CODE -- DO NOT EDIT!

'use strict';
var grpc = require('@grpc/grpc-js');
var ai_inworld_studio_v1alpha_tokens_pb = require('../../../../ai/inworld/studio/v1alpha/tokens_pb.js');



var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var options_pb = require('../../../../options_pb.js');

function serialize_ai_inworld_studio_v1alpha_GenerateDefaultSessionTokenRequest(arg) {
  if (!(arg instanceof ai_inworld_studio_v1alpha_tokens_pb.GenerateDefaultSessionTokenRequest)) {
    throw new Error('Expected argument of type ai.inworld.studio.v1alpha.GenerateDefaultSessionTokenRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ai_inworld_studio_v1alpha_GenerateDefaultSessionTokenRequest(buffer_arg) {
  return ai_inworld_studio_v1alpha_tokens_pb.GenerateDefaultSessionTokenRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ai_inworld_studio_v1alpha_GenerateSessionTokenRequest(arg) {
  if (!(arg instanceof ai_inworld_studio_v1alpha_tokens_pb.GenerateSessionTokenRequest)) {
    throw new Error('Expected argument of type ai.inworld.studio.v1alpha.GenerateSessionTokenRequest');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ai_inworld_studio_v1alpha_GenerateSessionTokenRequest(buffer_arg) {
  return ai_inworld_studio_v1alpha_tokens_pb.GenerateSessionTokenRequest.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_ai_inworld_studio_v1alpha_SessionAccessToken(arg) {
  if (!(arg instanceof ai_inworld_studio_v1alpha_tokens_pb.SessionAccessToken)) {
    throw new Error('Expected argument of type ai.inworld.studio.v1alpha.SessionAccessToken');
  }
  return Buffer.from(arg.serializeBinary());
}

function deserialize_ai_inworld_studio_v1alpha_SessionAccessToken(buffer_arg) {
  return ai_inworld_studio_v1alpha_tokens_pb.SessionAccessToken.deserializeBinary(new Uint8Array(buffer_arg));
}


// Service to generate JWT
var TokensService = exports.TokensService = {
  // Generates a JWT to access the world engine API with a given API key
// This method is meant to be used by end-user applications with API keys + secret
// A valid HMAC-SHA signature matching the API key in the request should be provided as authorization
// DEPRECATED: Runtime tokens are generated by the proxy-auth service
generateSessionToken: {
    path: '/ai.inworld.studio.v1alpha.Tokens/GenerateSessionToken',
    requestStream: false,
    responseStream: false,
    requestType: ai_inworld_studio_v1alpha_tokens_pb.GenerateSessionTokenRequest,
    responseType: ai_inworld_studio_v1alpha_tokens_pb.SessionAccessToken,
    requestSerialize: serialize_ai_inworld_studio_v1alpha_GenerateSessionTokenRequest,
    requestDeserialize: deserialize_ai_inworld_studio_v1alpha_GenerateSessionTokenRequest,
    responseSerialize: serialize_ai_inworld_studio_v1alpha_SessionAccessToken,
    responseDeserialize: deserialize_ai_inworld_studio_v1alpha_SessionAccessToken,
  },
  // Generates a JWT with the default API key for the given workspace
// This method is meant to be used by UI tools with user authorization such as Google or Oculus
generateDefaultSessionToken: {
    path: '/ai.inworld.studio.v1alpha.Tokens/GenerateDefaultSessionToken',
    requestStream: false,
    responseStream: false,
    requestType: ai_inworld_studio_v1alpha_tokens_pb.GenerateDefaultSessionTokenRequest,
    responseType: ai_inworld_studio_v1alpha_tokens_pb.SessionAccessToken,
    requestSerialize: serialize_ai_inworld_studio_v1alpha_GenerateDefaultSessionTokenRequest,
    requestDeserialize: deserialize_ai_inworld_studio_v1alpha_GenerateDefaultSessionTokenRequest,
    responseSerialize: serialize_ai_inworld_studio_v1alpha_SessionAccessToken,
    responseDeserialize: deserialize_ai_inworld_studio_v1alpha_SessionAccessToken,
  },
};

exports.TokensClient = grpc.makeGenericClientConstructor(TokensService);
