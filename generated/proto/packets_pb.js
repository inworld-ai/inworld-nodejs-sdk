// source: packets.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_duration_pb = require('google-protobuf/google/protobuf/duration_pb.js');
goog.object.extend(proto, google_protobuf_duration_pb);
var google_protobuf_struct_pb = require('google-protobuf/google/protobuf/struct_pb.js');
goog.object.extend(proto, google_protobuf_struct_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.ActionEvent', null, global);
goog.exportSymbol('proto.ActionEvent.ActionCase', null, global);
goog.exportSymbol('proto.Actor', null, global);
goog.exportSymbol('proto.Actor.Type', null, global);
goog.exportSymbol('proto.AdditionalPhonemeInfo', null, global);
goog.exportSymbol('proto.ApplyResponse', null, global);
goog.exportSymbol('proto.AudioChunk', null, global);
goog.exportSymbol('proto.CancelResponses', null, global);
goog.exportSymbol('proto.CancelResponsesEvent', null, global);
goog.exportSymbol('proto.ControlEvent', null, global);
goog.exportSymbol('proto.ControlEvent.Action', null, global);
goog.exportSymbol('proto.CustomEvent', null, global);
goog.exportSymbol('proto.CustomEvent.Parameter', null, global);
goog.exportSymbol('proto.DataChunk', null, global);
goog.exportSymbol('proto.DataChunk.DataCase', null, global);
goog.exportSymbol('proto.DataChunk.DataType', null, global);
goog.exportSymbol('proto.EmotionEvent', null, global);
goog.exportSymbol('proto.EmotionEvent.SpaffCode', null, global);
goog.exportSymbol('proto.EmotionEvent.Strength', null, global);
goog.exportSymbol('proto.GestureEvent', null, global);
goog.exportSymbol('proto.GestureEvent.Type', null, global);
goog.exportSymbol('proto.InworldPacket', null, global);
goog.exportSymbol('proto.InworldPacket.PacketCase', null, global);
goog.exportSymbol('proto.LoadScene', null, global);
goog.exportSymbol('proto.LoadSceneOutputEvent', null, global);
goog.exportSymbol('proto.LoadSceneOutputEvent.Agent', null, global);
goog.exportSymbol('proto.MutationEvent', null, global);
goog.exportSymbol('proto.MutationEvent.MutationCase', null, global);
goog.exportSymbol('proto.NarratedAction', null, global);
goog.exportSymbol('proto.PacketId', null, global);
goog.exportSymbol('proto.Playback', null, global);
goog.exportSymbol('proto.RegenerateResponse', null, global);
goog.exportSymbol('proto.Routing', null, global);
goog.exportSymbol('proto.TextEvent', null, global);
goog.exportSymbol('proto.TextEvent.SourceType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Actor = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Actor, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Actor.displayName = 'proto.Actor';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Routing = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Routing, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Routing.displayName = 'proto.Routing';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PacketId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PacketId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PacketId.displayName = 'proto.PacketId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.InworldPacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.InworldPacket.oneofGroups_);
};
goog.inherits(proto.InworldPacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.InworldPacket.displayName = 'proto.InworldPacket';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TextEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TextEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.TextEvent.displayName = 'proto.TextEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ControlEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ControlEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ControlEvent.displayName = 'proto.ControlEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AudioChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AudioChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AudioChunk.displayName = 'proto.AudioChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GestureEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.GestureEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.GestureEvent.displayName = 'proto.GestureEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CustomEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CustomEvent.repeatedFields_, null);
};
goog.inherits(proto.CustomEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CustomEvent.displayName = 'proto.CustomEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CustomEvent.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CustomEvent.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CustomEvent.Parameter.displayName = 'proto.CustomEvent.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CancelResponsesEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CancelResponsesEvent.repeatedFields_, null);
};
goog.inherits(proto.CancelResponsesEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CancelResponsesEvent.displayName = 'proto.CancelResponsesEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.EmotionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.EmotionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.EmotionEvent.displayName = 'proto.EmotionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DataChunk = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DataChunk.repeatedFields_, proto.DataChunk.oneofGroups_);
};
goog.inherits(proto.DataChunk, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DataChunk.displayName = 'proto.DataChunk';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AdditionalPhonemeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AdditionalPhonemeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AdditionalPhonemeInfo.displayName = 'proto.AdditionalPhonemeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ActionEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.ActionEvent.oneofGroups_);
};
goog.inherits(proto.ActionEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ActionEvent.displayName = 'proto.ActionEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NarratedAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NarratedAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.NarratedAction.displayName = 'proto.NarratedAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.MutationEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.MutationEvent.oneofGroups_);
};
goog.inherits(proto.MutationEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.MutationEvent.displayName = 'proto.MutationEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CancelResponses = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.CancelResponses.repeatedFields_, null);
};
goog.inherits(proto.CancelResponses, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CancelResponses.displayName = 'proto.CancelResponses';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegenerateResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegenerateResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RegenerateResponse.displayName = 'proto.RegenerateResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ApplyResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ApplyResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ApplyResponse.displayName = 'proto.ApplyResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoadScene = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoadScene, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LoadScene.displayName = 'proto.LoadScene';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoadSceneOutputEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.LoadSceneOutputEvent.repeatedFields_, null);
};
goog.inherits(proto.LoadSceneOutputEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LoadSceneOutputEvent.displayName = 'proto.LoadSceneOutputEvent';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.LoadSceneOutputEvent.Agent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.LoadSceneOutputEvent.Agent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.LoadSceneOutputEvent.Agent.displayName = 'proto.LoadSceneOutputEvent.Agent';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Actor.prototype.toObject = function(opt_includeInstance) {
  return proto.Actor.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Actor} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Actor.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Actor}
 */
proto.Actor.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Actor;
  return proto.Actor.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Actor} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Actor}
 */
proto.Actor.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Actor.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Actor.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Actor.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Actor} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Actor.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Actor.Type = {
  UNKNOWN: 0,
  PLAYER: 1,
  AGENT: 2
};

/**
 * optional Type type = 1;
 * @return {!proto.Actor.Type}
 */
proto.Actor.prototype.getType = function() {
  return /** @type {!proto.Actor.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Actor.Type} value
 * @return {!proto.Actor} returns this
 */
proto.Actor.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Actor.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.Actor} returns this
 */
proto.Actor.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Routing.prototype.toObject = function(opt_includeInstance) {
  return proto.Routing.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Routing} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Routing.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.Actor.toObject(includeInstance, f),
    target: (f = msg.getTarget()) && proto.Actor.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Routing}
 */
proto.Routing.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Routing;
  return proto.Routing.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Routing} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Routing}
 */
proto.Routing.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Actor;
      reader.readMessage(value,proto.Actor.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.Actor;
      reader.readMessage(value,proto.Actor.deserializeBinaryFromReader);
      msg.setTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Routing.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Routing.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Routing} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Routing.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Actor.serializeBinaryToWriter
    );
  }
  f = message.getTarget();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Actor.serializeBinaryToWriter
    );
  }
};


/**
 * optional Actor source = 1;
 * @return {?proto.Actor}
 */
proto.Routing.prototype.getSource = function() {
  return /** @type{?proto.Actor} */ (
    jspb.Message.getWrapperField(this, proto.Actor, 1));
};


/**
 * @param {?proto.Actor|undefined} value
 * @return {!proto.Routing} returns this
*/
proto.Routing.prototype.setSource = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Routing} returns this
 */
proto.Routing.prototype.clearSource = function() {
  return this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Routing.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Actor target = 2;
 * @return {?proto.Actor}
 */
proto.Routing.prototype.getTarget = function() {
  return /** @type{?proto.Actor} */ (
    jspb.Message.getWrapperField(this, proto.Actor, 2));
};


/**
 * @param {?proto.Actor|undefined} value
 * @return {!proto.Routing} returns this
*/
proto.Routing.prototype.setTarget = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Routing} returns this
 */
proto.Routing.prototype.clearTarget = function() {
  return this.setTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Routing.prototype.hasTarget = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PacketId.prototype.toObject = function(opt_includeInstance) {
  return proto.PacketId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PacketId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketId.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    utteranceId: jspb.Message.getFieldWithDefault(msg, 2, ""),
    interactionId: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PacketId}
 */
proto.PacketId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PacketId;
  return proto.PacketId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PacketId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PacketId}
 */
proto.PacketId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPacketId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUtteranceId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PacketId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PacketId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PacketId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PacketId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUtteranceId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getInteractionId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string packet_id = 1;
 * @return {string}
 */
proto.PacketId.prototype.getPacketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.PacketId} returns this
 */
proto.PacketId.prototype.setPacketId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string utterance_id = 2;
 * @return {string}
 */
proto.PacketId.prototype.getUtteranceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.PacketId} returns this
 */
proto.PacketId.prototype.setUtteranceId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string interaction_id = 3;
 * @return {string}
 */
proto.PacketId.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.PacketId} returns this
 */
proto.PacketId.prototype.setInteractionId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.InworldPacket.oneofGroups_ = [[2,3,4,5,8,10,11,12,13,15,16]];

/**
 * @enum {number}
 */
proto.InworldPacket.PacketCase = {
  PACKET_NOT_SET: 0,
  TEXT: 2,
  CONTROL: 3,
  AUDIO_CHUNK: 4,
  GESTURE: 5,
  CUSTOM: 8,
  CANCELRESPONSES: 10,
  EMOTION: 11,
  DATA_CHUNK: 12,
  ACTION: 13,
  MUTATION: 15,
  LOAD_SCENE_OUTPUT: 16
};

/**
 * @return {proto.InworldPacket.PacketCase}
 */
proto.InworldPacket.prototype.getPacketCase = function() {
  return /** @type {proto.InworldPacket.PacketCase} */(jspb.Message.computeOneofCase(this, proto.InworldPacket.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.InworldPacket.prototype.toObject = function(opt_includeInstance) {
  return proto.InworldPacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.InworldPacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InworldPacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    routing: (f = msg.getRouting()) && proto.Routing.toObject(includeInstance, f),
    oldPacketId: jspb.Message.getFieldWithDefault(msg, 7, ""),
    packetId: (f = msg.getPacketId()) && proto.PacketId.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.TextEvent.toObject(includeInstance, f),
    control: (f = msg.getControl()) && proto.ControlEvent.toObject(includeInstance, f),
    audioChunk: (f = msg.getAudioChunk()) && proto.AudioChunk.toObject(includeInstance, f),
    gesture: (f = msg.getGesture()) && proto.GestureEvent.toObject(includeInstance, f),
    custom: (f = msg.getCustom()) && proto.CustomEvent.toObject(includeInstance, f),
    cancelresponses: (f = msg.getCancelresponses()) && proto.CancelResponsesEvent.toObject(includeInstance, f),
    emotion: (f = msg.getEmotion()) && proto.EmotionEvent.toObject(includeInstance, f),
    dataChunk: (f = msg.getDataChunk()) && proto.DataChunk.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.ActionEvent.toObject(includeInstance, f),
    mutation: (f = msg.getMutation()) && proto.MutationEvent.toObject(includeInstance, f),
    loadSceneOutput: (f = msg.getLoadSceneOutput()) && proto.LoadSceneOutputEvent.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.InworldPacket}
 */
proto.InworldPacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.InworldPacket;
  return proto.InworldPacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.InworldPacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.InworldPacket}
 */
proto.InworldPacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 6:
      var value = new proto.Routing;
      reader.readMessage(value,proto.Routing.deserializeBinaryFromReader);
      msg.setRouting(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setOldPacketId(value);
      break;
    case 9:
      var value = new proto.PacketId;
      reader.readMessage(value,proto.PacketId.deserializeBinaryFromReader);
      msg.setPacketId(value);
      break;
    case 2:
      var value = new proto.TextEvent;
      reader.readMessage(value,proto.TextEvent.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 3:
      var value = new proto.ControlEvent;
      reader.readMessage(value,proto.ControlEvent.deserializeBinaryFromReader);
      msg.setControl(value);
      break;
    case 4:
      var value = new proto.AudioChunk;
      reader.readMessage(value,proto.AudioChunk.deserializeBinaryFromReader);
      msg.setAudioChunk(value);
      break;
    case 5:
      var value = new proto.GestureEvent;
      reader.readMessage(value,proto.GestureEvent.deserializeBinaryFromReader);
      msg.setGesture(value);
      break;
    case 8:
      var value = new proto.CustomEvent;
      reader.readMessage(value,proto.CustomEvent.deserializeBinaryFromReader);
      msg.setCustom(value);
      break;
    case 10:
      var value = new proto.CancelResponsesEvent;
      reader.readMessage(value,proto.CancelResponsesEvent.deserializeBinaryFromReader);
      msg.setCancelresponses(value);
      break;
    case 11:
      var value = new proto.EmotionEvent;
      reader.readMessage(value,proto.EmotionEvent.deserializeBinaryFromReader);
      msg.setEmotion(value);
      break;
    case 12:
      var value = new proto.DataChunk;
      reader.readMessage(value,proto.DataChunk.deserializeBinaryFromReader);
      msg.setDataChunk(value);
      break;
    case 13:
      var value = new proto.ActionEvent;
      reader.readMessage(value,proto.ActionEvent.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 15:
      var value = new proto.MutationEvent;
      reader.readMessage(value,proto.MutationEvent.deserializeBinaryFromReader);
      msg.setMutation(value);
      break;
    case 16:
      var value = new proto.LoadSceneOutputEvent;
      reader.readMessage(value,proto.LoadSceneOutputEvent.deserializeBinaryFromReader);
      msg.setLoadSceneOutput(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.InworldPacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.InworldPacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.InworldPacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.InworldPacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRouting();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Routing.serializeBinaryToWriter
    );
  }
  f = message.getOldPacketId();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getPacketId();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.PacketId.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TextEvent.serializeBinaryToWriter
    );
  }
  f = message.getControl();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ControlEvent.serializeBinaryToWriter
    );
  }
  f = message.getAudioChunk();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.AudioChunk.serializeBinaryToWriter
    );
  }
  f = message.getGesture();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.GestureEvent.serializeBinaryToWriter
    );
  }
  f = message.getCustom();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.CustomEvent.serializeBinaryToWriter
    );
  }
  f = message.getCancelresponses();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.CancelResponsesEvent.serializeBinaryToWriter
    );
  }
  f = message.getEmotion();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.EmotionEvent.serializeBinaryToWriter
    );
  }
  f = message.getDataChunk();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.DataChunk.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.ActionEvent.serializeBinaryToWriter
    );
  }
  f = message.getMutation();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.MutationEvent.serializeBinaryToWriter
    );
  }
  f = message.getLoadSceneOutput();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.LoadSceneOutputEvent.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.InworldPacket.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setTimestamp = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearTimestamp = function() {
  return this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Routing routing = 6;
 * @return {?proto.Routing}
 */
proto.InworldPacket.prototype.getRouting = function() {
  return /** @type{?proto.Routing} */ (
    jspb.Message.getWrapperField(this, proto.Routing, 6));
};


/**
 * @param {?proto.Routing|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setRouting = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearRouting = function() {
  return this.setRouting(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasRouting = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string old_packet_id = 7;
 * @return {string}
 */
proto.InworldPacket.prototype.getOldPacketId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.setOldPacketId = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional PacketId packet_id = 9;
 * @return {?proto.PacketId}
 */
proto.InworldPacket.prototype.getPacketId = function() {
  return /** @type{?proto.PacketId} */ (
    jspb.Message.getWrapperField(this, proto.PacketId, 9));
};


/**
 * @param {?proto.PacketId|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setPacketId = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearPacketId = function() {
  return this.setPacketId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasPacketId = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TextEvent text = 2;
 * @return {?proto.TextEvent}
 */
proto.InworldPacket.prototype.getText = function() {
  return /** @type{?proto.TextEvent} */ (
    jspb.Message.getWrapperField(this, proto.TextEvent, 2));
};


/**
 * @param {?proto.TextEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setText = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ControlEvent control = 3;
 * @return {?proto.ControlEvent}
 */
proto.InworldPacket.prototype.getControl = function() {
  return /** @type{?proto.ControlEvent} */ (
    jspb.Message.getWrapperField(this, proto.ControlEvent, 3));
};


/**
 * @param {?proto.ControlEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setControl = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearControl = function() {
  return this.setControl(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasControl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional AudioChunk audio_chunk = 4;
 * @return {?proto.AudioChunk}
 */
proto.InworldPacket.prototype.getAudioChunk = function() {
  return /** @type{?proto.AudioChunk} */ (
    jspb.Message.getWrapperField(this, proto.AudioChunk, 4));
};


/**
 * @param {?proto.AudioChunk|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setAudioChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearAudioChunk = function() {
  return this.setAudioChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasAudioChunk = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional GestureEvent gesture = 5;
 * @return {?proto.GestureEvent}
 */
proto.InworldPacket.prototype.getGesture = function() {
  return /** @type{?proto.GestureEvent} */ (
    jspb.Message.getWrapperField(this, proto.GestureEvent, 5));
};


/**
 * @param {?proto.GestureEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setGesture = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearGesture = function() {
  return this.setGesture(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasGesture = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional CustomEvent custom = 8;
 * @return {?proto.CustomEvent}
 */
proto.InworldPacket.prototype.getCustom = function() {
  return /** @type{?proto.CustomEvent} */ (
    jspb.Message.getWrapperField(this, proto.CustomEvent, 8));
};


/**
 * @param {?proto.CustomEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setCustom = function(value) {
  return jspb.Message.setOneofWrapperField(this, 8, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearCustom = function() {
  return this.setCustom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasCustom = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional CancelResponsesEvent cancelResponses = 10;
 * @return {?proto.CancelResponsesEvent}
 */
proto.InworldPacket.prototype.getCancelresponses = function() {
  return /** @type{?proto.CancelResponsesEvent} */ (
    jspb.Message.getWrapperField(this, proto.CancelResponsesEvent, 10));
};


/**
 * @param {?proto.CancelResponsesEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setCancelresponses = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearCancelresponses = function() {
  return this.setCancelresponses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasCancelresponses = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional EmotionEvent emotion = 11;
 * @return {?proto.EmotionEvent}
 */
proto.InworldPacket.prototype.getEmotion = function() {
  return /** @type{?proto.EmotionEvent} */ (
    jspb.Message.getWrapperField(this, proto.EmotionEvent, 11));
};


/**
 * @param {?proto.EmotionEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setEmotion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 11, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearEmotion = function() {
  return this.setEmotion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasEmotion = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional DataChunk data_chunk = 12;
 * @return {?proto.DataChunk}
 */
proto.InworldPacket.prototype.getDataChunk = function() {
  return /** @type{?proto.DataChunk} */ (
    jspb.Message.getWrapperField(this, proto.DataChunk, 12));
};


/**
 * @param {?proto.DataChunk|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setDataChunk = function(value) {
  return jspb.Message.setOneofWrapperField(this, 12, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearDataChunk = function() {
  return this.setDataChunk(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasDataChunk = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional ActionEvent action = 13;
 * @return {?proto.ActionEvent}
 */
proto.InworldPacket.prototype.getAction = function() {
  return /** @type{?proto.ActionEvent} */ (
    jspb.Message.getWrapperField(this, proto.ActionEvent, 13));
};


/**
 * @param {?proto.ActionEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 13, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearAction = function() {
  return this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasAction = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional MutationEvent mutation = 15;
 * @return {?proto.MutationEvent}
 */
proto.InworldPacket.prototype.getMutation = function() {
  return /** @type{?proto.MutationEvent} */ (
    jspb.Message.getWrapperField(this, proto.MutationEvent, 15));
};


/**
 * @param {?proto.MutationEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setMutation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 15, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearMutation = function() {
  return this.setMutation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasMutation = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional LoadSceneOutputEvent load_scene_output = 16;
 * @return {?proto.LoadSceneOutputEvent}
 */
proto.InworldPacket.prototype.getLoadSceneOutput = function() {
  return /** @type{?proto.LoadSceneOutputEvent} */ (
    jspb.Message.getWrapperField(this, proto.LoadSceneOutputEvent, 16));
};


/**
 * @param {?proto.LoadSceneOutputEvent|undefined} value
 * @return {!proto.InworldPacket} returns this
*/
proto.InworldPacket.prototype.setLoadSceneOutput = function(value) {
  return jspb.Message.setOneofWrapperField(this, 16, proto.InworldPacket.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.InworldPacket} returns this
 */
proto.InworldPacket.prototype.clearLoadSceneOutput = function() {
  return this.setLoadSceneOutput(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.InworldPacket.prototype.hasLoadSceneOutput = function() {
  return jspb.Message.getField(this, 16) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TextEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.TextEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TextEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    pb_final: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TextEvent}
 */
proto.TextEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TextEvent;
  return proto.TextEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TextEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TextEvent}
 */
proto.TextEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {!proto.TextEvent.SourceType} */ (reader.readEnum());
      msg.setSourceType(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFinal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TextEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TextEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TextEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TextEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getFinal();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.TextEvent.SourceType = {
  UNKNOWN: 0,
  SPEECH_TO_TEXT: 1,
  TYPED_IN: 2,
  GENERATED: 3,
  FILLER: 4
};

/**
 * optional string text = 1;
 * @return {string}
 */
proto.TextEvent.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.TextEvent} returns this
 */
proto.TextEvent.prototype.setText = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SourceType source_type = 2;
 * @return {!proto.TextEvent.SourceType}
 */
proto.TextEvent.prototype.getSourceType = function() {
  return /** @type {!proto.TextEvent.SourceType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.TextEvent.SourceType} value
 * @return {!proto.TextEvent} returns this
 */
proto.TextEvent.prototype.setSourceType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional bool final = 3;
 * @return {boolean}
 */
proto.TextEvent.prototype.getFinal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.TextEvent} returns this
 */
proto.TextEvent.prototype.setFinal = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ControlEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ControlEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ControlEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    action: jspb.Message.getFieldWithDefault(msg, 1, 0),
    description: jspb.Message.getFieldWithDefault(msg, 2, ""),
    payload: (f = msg.getPayload()) && google_protobuf_struct_pb.Struct.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ControlEvent}
 */
proto.ControlEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ControlEvent;
  return proto.ControlEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ControlEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ControlEvent}
 */
proto.ControlEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.ControlEvent.Action} */ (reader.readEnum());
      msg.setAction(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = new google_protobuf_struct_pb.Struct;
      reader.readMessage(value,google_protobuf_struct_pb.Struct.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ControlEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ControlEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ControlEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ControlEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAction();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_struct_pb.Struct.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.ControlEvent.Action = {
  UNKNOWN: 0,
  AUDIO_SESSION_START: 1,
  AUDIO_SESSION_END: 2,
  INTERACTION_END: 3,
  TTS_PLAYBACK_START: 4,
  TTS_PLAYBACK_END: 5,
  TTS_PLAYBACK_MUTE: 6,
  TTS_PLAYBACK_UNMUTE: 7,
  WARNING: 8,
  SESSION_END: 9
};

/**
 * optional Action action = 1;
 * @return {!proto.ControlEvent.Action}
 */
proto.ControlEvent.prototype.getAction = function() {
  return /** @type {!proto.ControlEvent.Action} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.ControlEvent.Action} value
 * @return {!proto.ControlEvent} returns this
 */
proto.ControlEvent.prototype.setAction = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.ControlEvent.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ControlEvent} returns this
 */
proto.ControlEvent.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional google.protobuf.Struct payload = 3;
 * @return {?proto.google.protobuf.Struct}
 */
proto.ControlEvent.prototype.getPayload = function() {
  return /** @type{?proto.google.protobuf.Struct} */ (
    jspb.Message.getWrapperField(this, google_protobuf_struct_pb.Struct, 3));
};


/**
 * @param {?proto.google.protobuf.Struct|undefined} value
 * @return {!proto.ControlEvent} returns this
*/
proto.ControlEvent.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ControlEvent} returns this
 */
proto.ControlEvent.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ControlEvent.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AudioChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.AudioChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AudioChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AudioChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AudioChunk}
 */
proto.AudioChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AudioChunk;
  return proto.AudioChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AudioChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AudioChunk}
 */
proto.AudioChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AudioChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AudioChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AudioChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AudioChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChunk_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.AudioChunk.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.AudioChunk.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.AudioChunk.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.AudioChunk} returns this
 */
proto.AudioChunk.prototype.setChunk = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GestureEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.GestureEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GestureEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GestureEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    playback: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GestureEvent}
 */
proto.GestureEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GestureEvent;
  return proto.GestureEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GestureEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GestureEvent}
 */
proto.GestureEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.GestureEvent.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {!proto.Playback} */ (reader.readEnum());
      msg.setPlayback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GestureEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GestureEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GestureEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GestureEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPlayback();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.GestureEvent.Type = {
  GREETING: 0,
  FAREWELL: 1,
  AGREEMENT: 2,
  DISAGREEMENT: 3,
  GRATITUDE: 4,
  CELEBRATION: 5,
  BOREDOM: 6,
  UNCERTAINTY: 7
};

/**
 * optional Type type = 1;
 * @return {!proto.GestureEvent.Type}
 */
proto.GestureEvent.prototype.getType = function() {
  return /** @type {!proto.GestureEvent.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.GestureEvent.Type} value
 * @return {!proto.GestureEvent} returns this
 */
proto.GestureEvent.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Playback playback = 2;
 * @return {!proto.Playback}
 */
proto.GestureEvent.prototype.getPlayback = function() {
  return /** @type {!proto.Playback} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Playback} value
 * @return {!proto.GestureEvent} returns this
 */
proto.GestureEvent.prototype.setPlayback = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CustomEvent.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CustomEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.CustomEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CustomEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    playback: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.CustomEvent.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CustomEvent}
 */
proto.CustomEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CustomEvent;
  return proto.CustomEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CustomEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CustomEvent}
 */
proto.CustomEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.Playback} */ (reader.readEnum());
      msg.setPlayback(value);
      break;
    case 3:
      var value = new proto.CustomEvent.Parameter;
      reader.readMessage(value,proto.CustomEvent.Parameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CustomEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CustomEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CustomEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPlayback();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.CustomEvent.Parameter.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CustomEvent.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.CustomEvent.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CustomEvent.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomEvent.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CustomEvent.Parameter}
 */
proto.CustomEvent.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CustomEvent.Parameter;
  return proto.CustomEvent.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CustomEvent.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CustomEvent.Parameter}
 */
proto.CustomEvent.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CustomEvent.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CustomEvent.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CustomEvent.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CustomEvent.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.CustomEvent.Parameter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CustomEvent.Parameter} returns this
 */
proto.CustomEvent.Parameter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.CustomEvent.Parameter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CustomEvent.Parameter} returns this
 */
proto.CustomEvent.Parameter.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.CustomEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CustomEvent} returns this
 */
proto.CustomEvent.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Playback playback = 2;
 * @return {!proto.Playback}
 */
proto.CustomEvent.prototype.getPlayback = function() {
  return /** @type {!proto.Playback} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Playback} value
 * @return {!proto.CustomEvent} returns this
 */
proto.CustomEvent.prototype.setPlayback = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated Parameter parameters = 3;
 * @return {!Array<!proto.CustomEvent.Parameter>}
 */
proto.CustomEvent.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.CustomEvent.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CustomEvent.Parameter, 3));
};


/**
 * @param {!Array<!proto.CustomEvent.Parameter>} value
 * @return {!proto.CustomEvent} returns this
*/
proto.CustomEvent.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.CustomEvent.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CustomEvent.Parameter}
 */
proto.CustomEvent.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.CustomEvent.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CustomEvent} returns this
 */
proto.CustomEvent.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CancelResponsesEvent.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CancelResponsesEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.CancelResponsesEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CancelResponsesEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelResponsesEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    utteranceIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CancelResponsesEvent}
 */
proto.CancelResponsesEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CancelResponsesEvent;
  return proto.CancelResponsesEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CancelResponsesEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CancelResponsesEvent}
 */
proto.CancelResponsesEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUtteranceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CancelResponsesEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CancelResponsesEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CancelResponsesEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelResponsesEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUtteranceIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string interaction_id = 1;
 * @return {string}
 */
proto.CancelResponsesEvent.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CancelResponsesEvent} returns this
 */
proto.CancelResponsesEvent.prototype.setInteractionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string utterance_id = 2;
 * @return {!Array<string>}
 */
proto.CancelResponsesEvent.prototype.getUtteranceIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CancelResponsesEvent} returns this
 */
proto.CancelResponsesEvent.prototype.setUtteranceIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CancelResponsesEvent} returns this
 */
proto.CancelResponsesEvent.prototype.addUtteranceId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CancelResponsesEvent} returns this
 */
proto.CancelResponsesEvent.prototype.clearUtteranceIdList = function() {
  return this.setUtteranceIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.EmotionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.EmotionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.EmotionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmotionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    joy: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    fear: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    trust: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    surprise: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    behavior: jspb.Message.getFieldWithDefault(msg, 5, 0),
    strength: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.EmotionEvent}
 */
proto.EmotionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.EmotionEvent;
  return proto.EmotionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.EmotionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.EmotionEvent}
 */
proto.EmotionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setJoy(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFear(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTrust(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSurprise(value);
      break;
    case 5:
      var value = /** @type {!proto.EmotionEvent.SpaffCode} */ (reader.readEnum());
      msg.setBehavior(value);
      break;
    case 6:
      var value = /** @type {!proto.EmotionEvent.Strength} */ (reader.readEnum());
      msg.setStrength(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.EmotionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.EmotionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.EmotionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.EmotionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJoy();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getFear();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTrust();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getSurprise();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getBehavior();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStrength();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.EmotionEvent.SpaffCode = {
  NEUTRAL: 0,
  DISGUST: 1,
  CONTEMPT: 2,
  BELLIGERENCE: 3,
  DOMINEERING: 4,
  CRITICISM: 5,
  ANGER: 6,
  TENSION: 7,
  TENSE_HUMOR: 8,
  DEFENSIVENESS: 9,
  WHINING: 10,
  SADNESS: 11,
  STONEWALLING: 12,
  INTEREST: 13,
  VALIDATION: 14,
  AFFECTION: 15,
  HUMOR: 16,
  SURPRISE: 17,
  JOY: 18
};

/**
 * @enum {number}
 */
proto.EmotionEvent.Strength = {
  UNSPECIFIED: 0,
  WEAK: 1,
  STRONG: 2,
  NORMAL: 3
};

/**
 * optional float joy = 1;
 * @return {number}
 */
proto.EmotionEvent.prototype.getJoy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setJoy = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float fear = 2;
 * @return {number}
 */
proto.EmotionEvent.prototype.getFear = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setFear = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float trust = 3;
 * @return {number}
 */
proto.EmotionEvent.prototype.getTrust = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setTrust = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float surprise = 4;
 * @return {number}
 */
proto.EmotionEvent.prototype.getSurprise = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setSurprise = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional SpaffCode behavior = 5;
 * @return {!proto.EmotionEvent.SpaffCode}
 */
proto.EmotionEvent.prototype.getBehavior = function() {
  return /** @type {!proto.EmotionEvent.SpaffCode} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.EmotionEvent.SpaffCode} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setBehavior = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional Strength strength = 6;
 * @return {!proto.EmotionEvent.Strength}
 */
proto.EmotionEvent.prototype.getStrength = function() {
  return /** @type {!proto.EmotionEvent.Strength} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.EmotionEvent.Strength} value
 * @return {!proto.EmotionEvent} returns this
 */
proto.EmotionEvent.prototype.setStrength = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DataChunk.repeatedFields_ = [4];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.DataChunk.oneofGroups_ = [[1,3]];

/**
 * @enum {number}
 */
proto.DataChunk.DataCase = {
  DATA_NOT_SET: 0,
  CHUNK: 1,
  DURATION_MS: 3
};

/**
 * @return {proto.DataChunk.DataCase}
 */
proto.DataChunk.prototype.getDataCase = function() {
  return /** @type {proto.DataChunk.DataCase} */(jspb.Message.computeOneofCase(this, proto.DataChunk.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DataChunk.prototype.toObject = function(opt_includeInstance) {
  return proto.DataChunk.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DataChunk} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataChunk.toObject = function(includeInstance, msg) {
  var f, obj = {
    chunk: msg.getChunk_asB64(),
    durationMs: jspb.Message.getFieldWithDefault(msg, 3, 0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    additionalPhonemeInfoList: jspb.Message.toObjectList(msg.getAdditionalPhonemeInfoList(),
    proto.AdditionalPhonemeInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DataChunk}
 */
proto.DataChunk.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DataChunk;
  return proto.DataChunk.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DataChunk} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DataChunk}
 */
proto.DataChunk.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunk(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationMs(value);
      break;
    case 2:
      var value = /** @type {!proto.DataChunk.DataType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.AdditionalPhonemeInfo;
      reader.readMessage(value,proto.AdditionalPhonemeInfo.deserializeBinaryFromReader);
      msg.addAdditionalPhonemeInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DataChunk.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DataChunk.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DataChunk} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DataChunk.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getAdditionalPhonemeInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.AdditionalPhonemeInfo.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.DataChunk.DataType = {
  UNSPECIFIED: 0,
  AUDIO: 1,
  ANIMATION: 2,
  SILENCE: 3,
  STATE: 4
};

/**
 * optional bytes chunk = 1;
 * @return {!(string|Uint8Array)}
 */
proto.DataChunk.prototype.getChunk = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes chunk = 1;
 * This is a type-conversion wrapper around `getChunk()`
 * @return {string}
 */
proto.DataChunk.prototype.getChunk_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunk()));
};


/**
 * optional bytes chunk = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunk()`
 * @return {!Uint8Array}
 */
proto.DataChunk.prototype.getChunk_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunk()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.setChunk = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.DataChunk.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.clearChunk = function() {
  return jspb.Message.setOneofField(this, 1, proto.DataChunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataChunk.prototype.hasChunk = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 duration_ms = 3;
 * @return {number}
 */
proto.DataChunk.prototype.getDurationMs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.setDurationMs = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.DataChunk.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.clearDurationMs = function() {
  return jspb.Message.setOneofField(this, 3, proto.DataChunk.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DataChunk.prototype.hasDurationMs = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional DataType type = 2;
 * @return {!proto.DataChunk.DataType}
 */
proto.DataChunk.prototype.getType = function() {
  return /** @type {!proto.DataChunk.DataType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.DataChunk.DataType} value
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated AdditionalPhonemeInfo additional_phoneme_info = 4;
 * @return {!Array<!proto.AdditionalPhonemeInfo>}
 */
proto.DataChunk.prototype.getAdditionalPhonemeInfoList = function() {
  return /** @type{!Array<!proto.AdditionalPhonemeInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.AdditionalPhonemeInfo, 4));
};


/**
 * @param {!Array<!proto.AdditionalPhonemeInfo>} value
 * @return {!proto.DataChunk} returns this
*/
proto.DataChunk.prototype.setAdditionalPhonemeInfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.AdditionalPhonemeInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.AdditionalPhonemeInfo}
 */
proto.DataChunk.prototype.addAdditionalPhonemeInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.AdditionalPhonemeInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DataChunk} returns this
 */
proto.DataChunk.prototype.clearAdditionalPhonemeInfoList = function() {
  return this.setAdditionalPhonemeInfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AdditionalPhonemeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.AdditionalPhonemeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AdditionalPhonemeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdditionalPhonemeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    phoneme: jspb.Message.getFieldWithDefault(msg, 1, ""),
    startOffset: (f = msg.getStartOffset()) && google_protobuf_duration_pb.Duration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AdditionalPhonemeInfo}
 */
proto.AdditionalPhonemeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AdditionalPhonemeInfo;
  return proto.AdditionalPhonemeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AdditionalPhonemeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AdditionalPhonemeInfo}
 */
proto.AdditionalPhonemeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhoneme(value);
      break;
    case 2:
      var value = new google_protobuf_duration_pb.Duration;
      reader.readMessage(value,google_protobuf_duration_pb.Duration.deserializeBinaryFromReader);
      msg.setStartOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AdditionalPhonemeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AdditionalPhonemeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AdditionalPhonemeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AdditionalPhonemeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhoneme();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStartOffset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_duration_pb.Duration.serializeBinaryToWriter
    );
  }
};


/**
 * optional string phoneme = 1;
 * @return {string}
 */
proto.AdditionalPhonemeInfo.prototype.getPhoneme = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AdditionalPhonemeInfo} returns this
 */
proto.AdditionalPhonemeInfo.prototype.setPhoneme = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional google.protobuf.Duration start_offset = 2;
 * @return {?proto.google.protobuf.Duration}
 */
proto.AdditionalPhonemeInfo.prototype.getStartOffset = function() {
  return /** @type{?proto.google.protobuf.Duration} */ (
    jspb.Message.getWrapperField(this, google_protobuf_duration_pb.Duration, 2));
};


/**
 * @param {?proto.google.protobuf.Duration|undefined} value
 * @return {!proto.AdditionalPhonemeInfo} returns this
*/
proto.AdditionalPhonemeInfo.prototype.setStartOffset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AdditionalPhonemeInfo} returns this
 */
proto.AdditionalPhonemeInfo.prototype.clearStartOffset = function() {
  return this.setStartOffset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AdditionalPhonemeInfo.prototype.hasStartOffset = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.ActionEvent.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.ActionEvent.ActionCase = {
  ACTION_NOT_SET: 0,
  NARRATED_ACTION: 1
};

/**
 * @return {proto.ActionEvent.ActionCase}
 */
proto.ActionEvent.prototype.getActionCase = function() {
  return /** @type {proto.ActionEvent.ActionCase} */(jspb.Message.computeOneofCase(this, proto.ActionEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ActionEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.ActionEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ActionEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    narratedAction: (f = msg.getNarratedAction()) && proto.NarratedAction.toObject(includeInstance, f),
    playback: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ActionEvent}
 */
proto.ActionEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ActionEvent;
  return proto.ActionEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ActionEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ActionEvent}
 */
proto.ActionEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.NarratedAction;
      reader.readMessage(value,proto.NarratedAction.deserializeBinaryFromReader);
      msg.setNarratedAction(value);
      break;
    case 2:
      var value = /** @type {!proto.Playback} */ (reader.readEnum());
      msg.setPlayback(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ActionEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ActionEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ActionEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ActionEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNarratedAction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.NarratedAction.serializeBinaryToWriter
    );
  }
  f = message.getPlayback();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional NarratedAction narrated_action = 1;
 * @return {?proto.NarratedAction}
 */
proto.ActionEvent.prototype.getNarratedAction = function() {
  return /** @type{?proto.NarratedAction} */ (
    jspb.Message.getWrapperField(this, proto.NarratedAction, 1));
};


/**
 * @param {?proto.NarratedAction|undefined} value
 * @return {!proto.ActionEvent} returns this
*/
proto.ActionEvent.prototype.setNarratedAction = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.ActionEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ActionEvent} returns this
 */
proto.ActionEvent.prototype.clearNarratedAction = function() {
  return this.setNarratedAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ActionEvent.prototype.hasNarratedAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Playback playback = 2;
 * @return {!proto.Playback}
 */
proto.ActionEvent.prototype.getPlayback = function() {
  return /** @type {!proto.Playback} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Playback} value
 * @return {!proto.ActionEvent} returns this
 */
proto.ActionEvent.prototype.setPlayback = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NarratedAction.prototype.toObject = function(opt_includeInstance) {
  return proto.NarratedAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NarratedAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NarratedAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    content: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NarratedAction}
 */
proto.NarratedAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NarratedAction;
  return proto.NarratedAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NarratedAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NarratedAction}
 */
proto.NarratedAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NarratedAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NarratedAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NarratedAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NarratedAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContent();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string content = 1;
 * @return {string}
 */
proto.NarratedAction.prototype.getContent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.NarratedAction} returns this
 */
proto.NarratedAction.prototype.setContent = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.MutationEvent.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.MutationEvent.MutationCase = {
  MUTATION_NOT_SET: 0,
  CANCEL_RESPONSES: 1,
  REGENERATE_RESPONSE: 2,
  APPLY_RESPONSE: 3,
  LOAD_SCENE: 4
};

/**
 * @return {proto.MutationEvent.MutationCase}
 */
proto.MutationEvent.prototype.getMutationCase = function() {
  return /** @type {proto.MutationEvent.MutationCase} */(jspb.Message.computeOneofCase(this, proto.MutationEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.MutationEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.MutationEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.MutationEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MutationEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    cancelResponses: (f = msg.getCancelResponses()) && proto.CancelResponses.toObject(includeInstance, f),
    regenerateResponse: (f = msg.getRegenerateResponse()) && proto.RegenerateResponse.toObject(includeInstance, f),
    applyResponse: (f = msg.getApplyResponse()) && proto.ApplyResponse.toObject(includeInstance, f),
    loadScene: (f = msg.getLoadScene()) && proto.LoadScene.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.MutationEvent}
 */
proto.MutationEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.MutationEvent;
  return proto.MutationEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.MutationEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.MutationEvent}
 */
proto.MutationEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CancelResponses;
      reader.readMessage(value,proto.CancelResponses.deserializeBinaryFromReader);
      msg.setCancelResponses(value);
      break;
    case 2:
      var value = new proto.RegenerateResponse;
      reader.readMessage(value,proto.RegenerateResponse.deserializeBinaryFromReader);
      msg.setRegenerateResponse(value);
      break;
    case 3:
      var value = new proto.ApplyResponse;
      reader.readMessage(value,proto.ApplyResponse.deserializeBinaryFromReader);
      msg.setApplyResponse(value);
      break;
    case 4:
      var value = new proto.LoadScene;
      reader.readMessage(value,proto.LoadScene.deserializeBinaryFromReader);
      msg.setLoadScene(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.MutationEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.MutationEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.MutationEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.MutationEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCancelResponses();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CancelResponses.serializeBinaryToWriter
    );
  }
  f = message.getRegenerateResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RegenerateResponse.serializeBinaryToWriter
    );
  }
  f = message.getApplyResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.ApplyResponse.serializeBinaryToWriter
    );
  }
  f = message.getLoadScene();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.LoadScene.serializeBinaryToWriter
    );
  }
};


/**
 * optional CancelResponses cancel_responses = 1;
 * @return {?proto.CancelResponses}
 */
proto.MutationEvent.prototype.getCancelResponses = function() {
  return /** @type{?proto.CancelResponses} */ (
    jspb.Message.getWrapperField(this, proto.CancelResponses, 1));
};


/**
 * @param {?proto.CancelResponses|undefined} value
 * @return {!proto.MutationEvent} returns this
*/
proto.MutationEvent.prototype.setCancelResponses = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.MutationEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MutationEvent} returns this
 */
proto.MutationEvent.prototype.clearCancelResponses = function() {
  return this.setCancelResponses(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MutationEvent.prototype.hasCancelResponses = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional RegenerateResponse regenerate_response = 2;
 * @return {?proto.RegenerateResponse}
 */
proto.MutationEvent.prototype.getRegenerateResponse = function() {
  return /** @type{?proto.RegenerateResponse} */ (
    jspb.Message.getWrapperField(this, proto.RegenerateResponse, 2));
};


/**
 * @param {?proto.RegenerateResponse|undefined} value
 * @return {!proto.MutationEvent} returns this
*/
proto.MutationEvent.prototype.setRegenerateResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.MutationEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MutationEvent} returns this
 */
proto.MutationEvent.prototype.clearRegenerateResponse = function() {
  return this.setRegenerateResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MutationEvent.prototype.hasRegenerateResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ApplyResponse apply_response = 3;
 * @return {?proto.ApplyResponse}
 */
proto.MutationEvent.prototype.getApplyResponse = function() {
  return /** @type{?proto.ApplyResponse} */ (
    jspb.Message.getWrapperField(this, proto.ApplyResponse, 3));
};


/**
 * @param {?proto.ApplyResponse|undefined} value
 * @return {!proto.MutationEvent} returns this
*/
proto.MutationEvent.prototype.setApplyResponse = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.MutationEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MutationEvent} returns this
 */
proto.MutationEvent.prototype.clearApplyResponse = function() {
  return this.setApplyResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MutationEvent.prototype.hasApplyResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LoadScene load_scene = 4;
 * @return {?proto.LoadScene}
 */
proto.MutationEvent.prototype.getLoadScene = function() {
  return /** @type{?proto.LoadScene} */ (
    jspb.Message.getWrapperField(this, proto.LoadScene, 4));
};


/**
 * @param {?proto.LoadScene|undefined} value
 * @return {!proto.MutationEvent} returns this
*/
proto.MutationEvent.prototype.setLoadScene = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.MutationEvent.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.MutationEvent} returns this
 */
proto.MutationEvent.prototype.clearLoadScene = function() {
  return this.setLoadScene(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.MutationEvent.prototype.hasLoadScene = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.CancelResponses.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CancelResponses.prototype.toObject = function(opt_includeInstance) {
  return proto.CancelResponses.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CancelResponses} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelResponses.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    utteranceIdList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CancelResponses}
 */
proto.CancelResponses.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CancelResponses;
  return proto.CancelResponses.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CancelResponses} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CancelResponses}
 */
proto.CancelResponses.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addUtteranceId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CancelResponses.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CancelResponses.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CancelResponses} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CancelResponses.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUtteranceIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
};


/**
 * optional string interaction_id = 1;
 * @return {string}
 */
proto.CancelResponses.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.CancelResponses} returns this
 */
proto.CancelResponses.prototype.setInteractionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated string utterance_id = 2;
 * @return {!Array<string>}
 */
proto.CancelResponses.prototype.getUtteranceIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.CancelResponses} returns this
 */
proto.CancelResponses.prototype.setUtteranceIdList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.CancelResponses} returns this
 */
proto.CancelResponses.prototype.addUtteranceId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.CancelResponses} returns this
 */
proto.CancelResponses.prototype.clearUtteranceIdList = function() {
  return this.setUtteranceIdList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegenerateResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.RegenerateResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegenerateResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegenerateResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    interactionId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegenerateResponse}
 */
proto.RegenerateResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegenerateResponse;
  return proto.RegenerateResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegenerateResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegenerateResponse}
 */
proto.RegenerateResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInteractionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegenerateResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegenerateResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegenerateResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegenerateResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string interaction_id = 1;
 * @return {string}
 */
proto.RegenerateResponse.prototype.getInteractionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.RegenerateResponse} returns this
 */
proto.RegenerateResponse.prototype.setInteractionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ApplyResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ApplyResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ApplyResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    packetId: (f = msg.getPacketId()) && proto.PacketId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ApplyResponse}
 */
proto.ApplyResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ApplyResponse;
  return proto.ApplyResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ApplyResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ApplyResponse}
 */
proto.ApplyResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.PacketId;
      reader.readMessage(value,proto.PacketId.deserializeBinaryFromReader);
      msg.setPacketId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ApplyResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ApplyResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ApplyResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ApplyResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPacketId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.PacketId.serializeBinaryToWriter
    );
  }
};


/**
 * optional PacketId packet_id = 1;
 * @return {?proto.PacketId}
 */
proto.ApplyResponse.prototype.getPacketId = function() {
  return /** @type{?proto.PacketId} */ (
    jspb.Message.getWrapperField(this, proto.PacketId, 1));
};


/**
 * @param {?proto.PacketId|undefined} value
 * @return {!proto.ApplyResponse} returns this
*/
proto.ApplyResponse.prototype.setPacketId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ApplyResponse} returns this
 */
proto.ApplyResponse.prototype.clearPacketId = function() {
  return this.setPacketId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ApplyResponse.prototype.hasPacketId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoadScene.prototype.toObject = function(opt_includeInstance) {
  return proto.LoadScene.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoadScene} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadScene.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoadScene}
 */
proto.LoadScene.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoadScene;
  return proto.LoadScene.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoadScene} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoadScene}
 */
proto.LoadScene.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoadScene.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoadScene.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoadScene} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadScene.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.LoadScene.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoadScene} returns this
 */
proto.LoadScene.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.LoadSceneOutputEvent.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoadSceneOutputEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.LoadSceneOutputEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoadSceneOutputEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadSceneOutputEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentsList: jspb.Message.toObjectList(msg.getAgentsList(),
    proto.LoadSceneOutputEvent.Agent.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoadSceneOutputEvent}
 */
proto.LoadSceneOutputEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoadSceneOutputEvent;
  return proto.LoadSceneOutputEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoadSceneOutputEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoadSceneOutputEvent}
 */
proto.LoadSceneOutputEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.LoadSceneOutputEvent.Agent;
      reader.readMessage(value,proto.LoadSceneOutputEvent.Agent.deserializeBinaryFromReader);
      msg.addAgents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoadSceneOutputEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoadSceneOutputEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoadSceneOutputEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadSceneOutputEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.LoadSceneOutputEvent.Agent.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.LoadSceneOutputEvent.Agent.prototype.toObject = function(opt_includeInstance) {
  return proto.LoadSceneOutputEvent.Agent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.LoadSceneOutputEvent.Agent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadSceneOutputEvent.Agent.toObject = function(includeInstance, msg) {
  var f, obj = {
    agentId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    brainName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    givenName: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.LoadSceneOutputEvent.Agent}
 */
proto.LoadSceneOutputEvent.Agent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.LoadSceneOutputEvent.Agent;
  return proto.LoadSceneOutputEvent.Agent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.LoadSceneOutputEvent.Agent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.LoadSceneOutputEvent.Agent}
 */
proto.LoadSceneOutputEvent.Agent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAgentId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrainName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGivenName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.LoadSceneOutputEvent.Agent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.LoadSceneOutputEvent.Agent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.LoadSceneOutputEvent.Agent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.LoadSceneOutputEvent.Agent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAgentId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrainName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGivenName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string agent_id = 1;
 * @return {string}
 */
proto.LoadSceneOutputEvent.Agent.prototype.getAgentId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoadSceneOutputEvent.Agent} returns this
 */
proto.LoadSceneOutputEvent.Agent.prototype.setAgentId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string brain_name = 2;
 * @return {string}
 */
proto.LoadSceneOutputEvent.Agent.prototype.getBrainName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoadSceneOutputEvent.Agent} returns this
 */
proto.LoadSceneOutputEvent.Agent.prototype.setBrainName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string given_name = 3;
 * @return {string}
 */
proto.LoadSceneOutputEvent.Agent.prototype.getGivenName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.LoadSceneOutputEvent.Agent} returns this
 */
proto.LoadSceneOutputEvent.Agent.prototype.setGivenName = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Agent agents = 1;
 * @return {!Array<!proto.LoadSceneOutputEvent.Agent>}
 */
proto.LoadSceneOutputEvent.prototype.getAgentsList = function() {
  return /** @type{!Array<!proto.LoadSceneOutputEvent.Agent>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.LoadSceneOutputEvent.Agent, 1));
};


/**
 * @param {!Array<!proto.LoadSceneOutputEvent.Agent>} value
 * @return {!proto.LoadSceneOutputEvent} returns this
*/
proto.LoadSceneOutputEvent.prototype.setAgentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.LoadSceneOutputEvent.Agent=} opt_value
 * @param {number=} opt_index
 * @return {!proto.LoadSceneOutputEvent.Agent}
 */
proto.LoadSceneOutputEvent.prototype.addAgents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.LoadSceneOutputEvent.Agent, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.LoadSceneOutputEvent} returns this
 */
proto.LoadSceneOutputEvent.prototype.clearAgentsList = function() {
  return this.setAgentsList([]);
};


/**
 * @enum {number}
 */
proto.Playback = {
  UNSPECIFIED: 0,
  INTERACTION: 1,
  INTERACTION_END: 2,
  UTTERANCE: 3
};

goog.object.extend(exports, proto);
